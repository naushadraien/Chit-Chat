name: Build Expo App

on:
  push:
    branches:
      - main
    paths:
      - "client/**"
  workflow_dispatch:

jobs:
  build-expo-app:
    name: Build Mobile App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_ACCESS_TOKEN }}

      - name: Install dependencies
        run: bun install

      - name: Configure EAS project
        run: |
          # Add owner to app.json
          if [ -f "app.json" ]; then
            if ! grep -q "owner" app.json; then
              jq '.expo.owner = "naushadraien"' app.json > app.json.tmp && mv app.json.tmp app.json
              echo "Added owner to app.json"
            else
              echo "Owner field already exists in app.json"
            fi

            # Add backend URL if needed
            jq '.expo.extra.backendUrl = "${{ secrets.EXPO_PUBLIC_BACKEND_URL || "http://localhost:4000/api/v1" }}"' app.json > app.json.tmp && mv app.json.tmp app.json
            echo "Added backend URL to app.json"
          else
            echo "app.json not found, running eas init"
            echo "y" | bunx eas init --non-interactive
          fi

      - name: Configure eas.json for CI
        run: |
          cat > eas.json << EOF
          {
            "cli": {
              "version": ">= 3.13.3",
              "appVersionSource": "remote"
            },
            "build": {
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "withoutCredentials": true
                }
              }
            }
          }
          EOF
          echo "Created eas.json for CI build"

      - name: Build Android app
        id: build-app
        run: |
          # Submit the build and grab the build ID from the output
          BUILD_OUTPUT=$(bunx eas build --platform android --profile preview --non-interactive --no-wait)
          echo "$BUILD_OUTPUT"

          # Extract the build ID using regex pattern matching
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -o -E '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' | head -1)

          if [ -z "$BUILD_ID" ]; then
            echo "Failed to extract build ID from output. Trying to get it from the build list..."
            sleep 10
            
            # Fallback: Get the latest build ID from the build list
            LATEST_BUILD=$(bunx eas build:list --platform=android --json --non-interactive --limit=1)
            BUILD_ID=$(echo "$LATEST_BUILD" | jq -r '.[0].id // empty')
          fi

          if [ -z "$BUILD_ID" ]; then
            echo "No build ID found. Exiting."
            exit 1
          fi

          echo "Using build ID: $BUILD_ID"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV

      - name: Monitor build status
        run: |
          TIMEOUT=60  # minutes
          ELAPSED=0
          POLL_INTERVAL=60  # seconds

          echo "Monitoring build with ID: ${{ env.BUILD_ID }}"

          while [ $ELAPSED -lt $TIMEOUT ]; do
            echo "Checking build status (attempt $((ELAPSED+1))/$TIMEOUT)..."
            
            # Get build status from build list (more reliable than view)
            BUILD_LIST=$(bunx eas build:list --non-interactive)
            
            # Print output for debugging
            echo "Build list output:"
            echo "$BUILD_LIST"
            
            # Look for our build ID and extract the status
            if echo "$BUILD_LIST" | grep -q "${{ env.BUILD_ID }}"; then
              # Extract 5 lines after our build ID for context
              BUILD_INFO=$(echo "$BUILD_LIST" | grep -A 5 "${{ env.BUILD_ID }}")
              echo "Found our build in the list:"
              echo "$BUILD_INFO"
              
              # Extract status
              if echo "$BUILD_INFO" | grep -q "Status"; then
                STATUS=$(echo "$BUILD_INFO" | grep "Status" | sed 's/.*Status[[:space:]]*\([a-zA-Z]*\).*/\1/' | tr '[:upper:]' '[:lower:]')
                echo "Build status: $STATUS"
                
                if [ "$STATUS" = "finished" ]; then
                  echo "Build completed successfully!"
                  break
                elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
                  echo "Build failed or was canceled"
                  exit 1
                else
                  echo "Build still in progress (status: $STATUS)"
                fi
              else
                echo "Could not find status in build info"
              fi
            else
              echo "Build ID not found in build list yet. It may take a moment to appear."
            fi
            
            echo "Waiting for build to complete... ($ELAPSED/$TIMEOUT minutes)"
            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED+1))
          done

          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Timed out waiting for build to complete after $TIMEOUT minutes"
            exit 1
          fi

      - name: Download Android build
        if: success()
        run: |
          echo "Downloading build with ID: ${{ env.BUILD_ID }}"
          bunx eas build:download --non-interactive --build-id ${{ env.BUILD_ID }} --output ./ChitChat.apk

          if [ -f "./ChitChat.apk" ]; then
            echo "APK downloaded successfully"
            ls -la ./ChitChat.apk
          else
            echo "Failed to download APK"
            exit 1
          fi

      - name: Upload APK as artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ChitChat-APK
          path: ./client/ChitChat.apk
          retention-days: 14

      - name: Create GitHub Release
        if: success() && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: ./client/ChitChat.apk
          name: ChitChat v${{ github.run_number }}
          tag_name: v${{ github.run_number }}
          body: |
            ChitChat Mobile App Build ${{ github.run_number }}

            Built from commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
